(function(){"use strict";var t={};t.p="bundles/productbundle/",window?.__sw__?.assetPath&&(t.p=window.__sw__.assetPath+"/bundles/productbundle/"),function(){Shopware.Component.override("sw-product-detail",{template:'{% block sw_product_detail_content_tabs_reviews %}\n    {% parent %}\n\n    <sw-tabs-item :route="{ name: \'sw.product.detail.bundle\', params: { id: $route.params.id } }" title="Bundle">\n        Bundle\n    </sw-tabs-item>\n{% endblock %}'});let{Criteria:t}=Shopware.Data;Shopware.Component.register("sw-product-detail-bundle",{template:'<div class="sw-product-detail-bundle">\n    <sw-card title="Bundle Products">\n<sw-entity-single-select\n    :value="selectedProduct ? selectedProduct.id : null"\n    @update:value="onProductSelect"\n    entity="product"\n    label="Select Product"\n/>\n\n\n\n<sw-button @click="onAddProduct">Add to Bundle</sw-button>\n\n\n        <sw-data-grid\n            v-if="assignedProducts.length > 0"\n            :data-source="assignedProducts"\n            :columns="[\n                { property: \'product.name\', label: \'Product\' },\n                { property: \'quantity\', label: \'Quantity\' }\n            ]"\n        >\n            <template #column-quantity="{ item }">\n<sw-number-field\n    v-model="item.quantity"\n    :min="1"\n    @change="bundleAssignedProductsRepository.save(item, Shopware.Context.api)"\n/>\n\n            </template>\n\n            <template #actions="{ item }">\n                <sw-context-menu-item\n                    variant="danger"\n                    @click="deleteProduct(item)"\n                >\n                    Delete\n                </sw-context-menu-item>\n            </template>\n        </sw-data-grid>\n\n        <sw-empty-state\n            v-else\n            title="No products in bundle"\n        />\n    </sw-card>\n</div>',inject:["repositoryFactory"],data(){return{isLoading:!1,selectedProduct:null,assignedProducts:[]}},computed:{product(){return Shopware.State.get("swProductDetail").product},bundleAssignedProductsRepository(){return this.repositoryFactory.create("product_bundle_assigned_products")}},created(){this.loadAssignedProducts()},methods:{async onProductSelect(t){if(!t){this.selectedProduct=null;return}let e=this.repositoryFactory.create("product");try{this.selectedProduct=await e.get(t,Shopware.Context.api)}catch(t){console.error("Error fetching full product:",t),this.selectedProduct=null}},async loadAssignedProducts(){if(!this.product?.id){this.assignedProducts=[];return}this.isLoading=!0;try{let e=new t().addFilter(t.equals("bundle.productId",this.product.id)).addAssociation("product").addAssociation("bundle");this.assignedProducts=await this.bundleAssignedProductsRepository.search(e,Shopware.Context.api)}catch(t){console.error("Load error:",t.response?.data||t),this.assignedProducts=[]}finally{this.isLoading=!1}},async onAddProduct(){if(!this.selectedProduct?.id){console.error("[2] No product selected");return}try{let t=await this.findOrCreateBundle(),e=this.bundleAssignedProductsRepository.create();e.bundleId=t.id,e.productId=this.selectedProduct.id,e.quantity=1,await this.bundleAssignedProductsRepository.save(e,Shopware.Context.api),await this.loadAssignedProducts(),this.selectedProduct=null}catch(t){console.error("[ERROR] Full error:",t),console.error("[ERROR] API response:",t.response?.data)}},async findOrCreateBundle(){let e=this.repositoryFactory.create("product_bundle"),d=new t().addFilter(t.equals("productId",this.product.id)),n=await e.search(d,Shopware.Context.api);if(console.log("Bundle search result:",n),0===n.total){let t=e.create();return t.productId=this.product.id,t.name=`${this.product.name} Bundle`,await e.save(t,Shopware.Context.api),t}return n.first()}}}),Shopware.Module.register("sw-product-detail-bundle-tab",{routeMiddleware(t,e){let d="sw.product.detail.bundle";"sw.product.detail"===e.name&&e.children.every(t=>t.name!==d)&&e.children.push({name:d,path:"/sw/product/detail/:id/bundle",component:"sw-product-detail-bundle",meta:{parentPath:"sw.product.index"}}),t(e)}})}()})();